from datetime import datetime

from .datetime import DateTime
from .date import Date


# ПОРЯДОК ПЕРЕЧИСЛЕНИЯ ВАЖЕН (от самых частых до самых редких)
date_rules = [
    # год с указанием века
    '%Y-%m-%d',  # 8/25 (Венгрия, Канада (франц.), Польша, Словакия, Словения, Финляндия, Чехия, Швеция)
    '%d/%m/%Y',  # 6/25 (Великобритания, Бельгия, Бразилия, Италия, Испания, Латинская Америка)
    '%d.%m.%Y',  # 6/25 (Россия, Германия, Норвегия, Сербия/Югославия, Франция, Швейцария)
    '%m-%d-%Y',  # опасное 1/25 (США) - наверное в ПО встречается чаще
    # '%d-%m-%Y',  # опасное 4/25 (Дания, Международный английский, Нидерланды, Португалия)
    # год без указания века
    '%d/%m/%y',  # 6/25 (Великобритания, Бельгия, Бразилия, Италия, Испания, Латинская Америка)
    '%d.%m.%y',  # 6/25 (Россия, Германия, Норвегия, Сербия/Югославия, Франция, Швейцария)
    '%m-%d-%y',  # опасное 1/25 (США) - наверное в ПО встречается чаще
    # '%d-%m-%y',  # опасное 4/25 (Дания, Международный английский, Нидерланды, Португалия)
    '%y-%m-%d'  # последнее потому что наверное никогда не встречается 8/25 (Венгрия, Канада (франц.), Польша, Словакия, Словения, Финляндия, Чехия, Швеция)
]
''

time_rules = [
    # миллисекунды
    '%H:%M:%S.%f',  # базы данных
    # секунды
    '%H:%M:%S',  # 19/25 (Международный английский, Нидерланды, Португалия, Россия, Германия, Норвегия, Франция, Великобритания, Бельгия, Бразилия, Испания, Латинская Америка, США, Венгрия, Канада (франц.), Польша, Словакия, Словения, Чехия)
    '%H.%M.%S',  # 5/25 (Дания, Сербия/Югославия, Италия, Финляндия, Швеция)
    '%H,%M,%S'  # 1/25 (Швейцария)
    # минуты
    '%H:%M',  # 19/25 (Международный английский, Нидерланды, Португалия, Россия, Германия, Норвегия, Франция, Великобритания, Бельгия, Бразилия, Испания, Латинская Америка, США, Венгрия, Канада (франц.), Польша, Словакия, Словения, Чехия)
    '%H.%M',  # 5/25 (Дания, Сербия/Югославия, Италия, Финляндия, Швеция)
    '%H,%M'  # 1/25 (Швейцария)
]


def convert(value: str):
    for date in date_rules:
        for time in time_rules:
            variant = '{} {}'.format(date, time)
            try:
                dt = datetime.strptime(value, variant)
                print('template: {}'.format(variant))
                return DateTime(dt)
            except:
                pass
        try:
            d = datetime.strptime(value, date)
            print('template: {}'.format(date))
            return Date(d)
        except:
            pass
    return None


def clear_string(value):
    """
    Очистка входного значения от лишних символов и замена символов на подобные для одинакового их понимания
    :param value: any
    :return: str
    """
    if value:
        result = str(value)  # преобразование данных в строку
        result = result.replace('\r', ' ')  # замена возврата каретки на пробел
        result = result.replace('\t', ' ')  # замена табуляции на пробел
        result = result.replace('\n', ' ')  # замена перевода строки на пробел
        result = result.strip()  # обрезка пробелов в начале и конце строки
        # замена двойных пробелов на одинарные до тех пор, пока они присутствуют в строке
        while '  ' in result:
            result = result.replace('  ', ' ')
        # замена всех видов тире на дефис
        result = (result.replace('‐', '-')
                  .replace('–', '-')
                  .replace('—', '-')
                  .replace('−', '-'))
        return result
    else:
        return ''
